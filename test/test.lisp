(in-package :lisp-struct/test)

(defun array= (a b)
  (and (= (length a) (length b)) (every #'identity (map 'list #'= a b))))

(test character-tests
      (is (equal '(#\A) (lisp-struct:unpack ">c" #(65))))
      (is (equal '(#\A) (lisp-struct:unpack "<c" #(65))))
      (is (equal '(#\A #\B #\C) (lisp-struct:unpack ">ccc" #(65 66 67))))
      (is (equal '(#\A #\B #\C) (lisp-struct:unpack "<ccc" #(65 66 67))))
      (is (equal '(#\A #\B #\C) (lisp-struct:unpack ">3c" #(65 66 67))))
      (is (equal '(#\A #\B #\C) (lisp-struct:unpack "<3c" #(65 66 67))))
      (is (array= #(65) (lisp-struct:pack ">c" '(#\A))))
      (is (array= #(65) (lisp-struct:pack "<c" '(#\A))))
      (is (array= #(65 66 67) (lisp-struct:pack ">ccc" '(#\A #\B #\C))))
      (is (array= #(65 66 67) (lisp-struct:pack "<ccc" '(#\A #\B #\C))))
      (is (array= #(65 66 67) (lisp-struct:pack ">3c" '(#\A #\B #\C))))
      (is (array= #(65 66 67) (lisp-struct:pack "<3c" '(#\A #\B #\C)))))

(test (string-tests :depends-on character-tests)
      (is (equal '("A") (lisp-struct:unpack ">s" #(65))))
      (is (equal '("A") (lisp-struct:unpack "<s" #(65))))
      (is (equal '("ABC") (lisp-struct:unpack ">3s" #(65 66 67))))
      (is (equal '("ABC") (lisp-struct:unpack "<3s" #(65 66 67))))
      (is (equal '(#\x "ABC" #\y) (lisp-struct:unpack ">c3sc" #(120 65 66 67 121))))
      (is (equal '(#\x "ABC" #\y) (lisp-struct:unpack "<c3sc" #(120 65 66 67 121))))
      (is (array= #(65) (lisp-struct:pack ">s" '("A"))))
      (is (array= #(65) (lisp-struct:pack "<s" '("A"))))
      (is (array= #(65 66 67) (lisp-struct:pack ">3s" '("ABC"))))
      (is (array= #(65 66 67) (lisp-struct:pack "<3s" '("ABC"))))
      (is (array= #(120 65 66 67 121) (lisp-struct:pack ">c3sc" '(#\x "ABC" #\y))))
      (is (array= #(120 65 66 67 121) (lisp-struct:pack "<c3sc" '(#\x "ABC" #\y)))))

(test conversion-tests
      ;; unsigned to signed, 8 bits
      (is (= 0 (lisp-struct::unsigned-to-signed 0 1)))
      (is (= 1 (lisp-struct::unsigned-to-signed 1 1)))
      (is (= 2 (lisp-struct::unsigned-to-signed 2 1)))
      (is (= 126 (lisp-struct::unsigned-to-signed 126 1)))
      (is (= 127 (lisp-struct::unsigned-to-signed 127 1)))
      (is (= -128 (lisp-struct::unsigned-to-signed 128 1)))
      (is (= -127 (lisp-struct::unsigned-to-signed 129 1)))
      (is (= -2 (lisp-struct::unsigned-to-signed 254 1)))
      (is (= -1 (lisp-struct::unsigned-to-signed 255 1)))
      ;; unsigned to signed, 32 bits
      (is (= 0 (lisp-struct::unsigned-to-signed 0 4)))
      (is (= 1 (lisp-struct::unsigned-to-signed 1 4)))
      (is (= 2 (lisp-struct::unsigned-to-signed 2 4)))
      (is (= 2147483646 (lisp-struct::unsigned-to-signed 2147483646 4)))
      (is (= 2147483647 (lisp-struct::unsigned-to-signed 2147483647 4)))
      (is (= -2147483648 (lisp-struct::unsigned-to-signed 2147483648 4)))
      (is (= -2147483647 (lisp-struct::unsigned-to-signed 2147483649 4)))
      (is (= -2 (lisp-struct::unsigned-to-signed 4294967294 4)))
      (is (= -1 (lisp-struct::unsigned-to-signed 4294967295 4)))
      ;; signed to unsigned, 8 bits
      (is (= 0 (lisp-struct::signed-to-unsigned 0 1)))
      (is (= 1 (lisp-struct::signed-to-unsigned 1 1)))
      (is (= 2 (lisp-struct::signed-to-unsigned 2 1)))
      (is (= 126 (lisp-struct::signed-to-unsigned 126 1)))
      (is (= 127 (lisp-struct::signed-to-unsigned 127 1)))
      (is (= 128 (lisp-struct::signed-to-unsigned -128 1)))
      (is (= 129 (lisp-struct::signed-to-unsigned -127 1)))
      (is (= 254 (lisp-struct::signed-to-unsigned -2 1)))
      (is (= 255 (lisp-struct::signed-to-unsigned -1 1)))
      ;; signed to unsigned, 32 bits
      (is (= 0 (lisp-struct::signed-to-unsigned 0 4)))
      (is (= 1 (lisp-struct::signed-to-unsigned 1 4)))
      (is (= 2 (lisp-struct::signed-to-unsigned 2 4)))
      (is (= 2147483646 (lisp-struct::signed-to-unsigned 2147483646 4)))
      (is (= 2147483647 (lisp-struct::signed-to-unsigned 2147483647 4)))
      (is (= 2147483648 (lisp-struct::signed-to-unsigned -2147483648 4)))
      (is (= 2147483649 (lisp-struct::signed-to-unsigned -2147483647 4)))
      (is (= 4294967294 (lisp-struct::signed-to-unsigned -2 4)))
      (is (= 4294967295 (lisp-struct::signed-to-unsigned -1 4))))

(test integer-limits
      ;; unsigned, 8 bits
      (signals limit-error (lisp-struct::integer-limit-unsigned 256 1))
      (signals limit-error (lisp-struct::integer-limit-unsigned -1 1))
      ;; unsigned, 16 bits
      (signals limit-error (lisp-struct::integer-limit-unsigned 65537 2))
      (signals limit-error (lisp-struct::integer-limit-unsigned -1 2))
      ;; unsigned, 32 bits
      (signals limit-error (lisp-struct::integer-limit-unsigned 4294967296 4))
      (signals limit-error (lisp-struct::integer-limit-unsigned -1 4))
      ;; signed, 8 bits
      (signals limit-error (lisp-struct::integer-limit-signed 128 1))
      (signals limit-error (lisp-struct::integer-limit-signed -129 1))
      ;; signed, 16 bits
      (signals limit-error (lisp-struct::integer-limit-signed 32768 2))
      (signals limit-error (lisp-struct::integer-limit-signed -32769 2))
      ;; signed, 32 bits
      (signals limit-error (lisp-struct::integer-limit-signed 2147483648 4))
      (signals limit-error (lisp-struct::integer-limit-signed -2147483649 4))
      ;; restarts (use value)
      (is (= 55 (handler-bind ((limit-error #'(lambda (c) (declare (ignore c)) (invoke-restart 'use-value 55)))) (lisp-struct::integer-limit-unsigned -500 1))))
      (is (= 55 (handler-bind ((limit-error #'(lambda (c) (declare (ignore c)) (invoke-restart 'use-value 55)))) (lisp-struct::integer-limit-unsigned +500 1))))
      (is (= 55 (handler-bind ((limit-error #'(lambda (c) (declare (ignore c)) (invoke-restart 'use-value 55)))) (lisp-struct::integer-limit-unsigned -500000 2))))
      (is (= 55 (handler-bind ((limit-error #'(lambda (c) (declare (ignore c)) (invoke-restart 'use-value 55)))) (lisp-struct::integer-limit-unsigned +500000 2))))
      (is (= 55 (handler-bind ((limit-error #'(lambda (c) (declare (ignore c)) (invoke-restart 'use-value 55)))) (lisp-struct::integer-limit-unsigned -5000000000 4))))
      (is (= 55 (handler-bind ((limit-error #'(lambda (c) (declare (ignore c)) (invoke-restart 'use-value 55)))) (lisp-struct::integer-limit-unsigned +5000000000 4))))
      (is (= 55 (handler-bind ((limit-error #'(lambda (c) (declare (ignore c)) (invoke-restart 'use-value 55)))) (lisp-struct::integer-limit-signed -500 1))))
      (is (= 55 (handler-bind ((limit-error #'(lambda (c) (declare (ignore c)) (invoke-restart 'use-value 55)))) (lisp-struct::integer-limit-signed +500 1))))
      (is (= 55 (handler-bind ((limit-error #'(lambda (c) (declare (ignore c)) (invoke-restart 'use-value 55)))) (lisp-struct::integer-limit-signed -500000 2))))
      (is (= 55 (handler-bind ((limit-error #'(lambda (c) (declare (ignore c)) (invoke-restart 'use-value 55)))) (lisp-struct::integer-limit-signed +500000 2))))
      (is (= 55 (handler-bind ((limit-error #'(lambda (c) (declare (ignore c)) (invoke-restart 'use-value 55)))) (lisp-struct::integer-limit-signed -5000000000 4))))
      (is (= 55 (handler-bind ((limit-error #'(lambda (c) (declare (ignore c)) (invoke-restart 'use-value 55)))) (lisp-struct::integer-limit-signed +5000000000 4))))
      ;; restarts (clip value)
      (is (= 0 (handler-bind ((limit-error #'(lambda (c) (declare (ignore c)) (invoke-restart 'clip-value)))) (lisp-struct::integer-limit-unsigned -500 1))))
      (is (= 255 (handler-bind ((limit-error #'(lambda (c) (declare (ignore c)) (invoke-restart 'clip-value)))) (lisp-struct::integer-limit-unsigned +500 1))))
      (is (= 0 (handler-bind ((limit-error #'(lambda (c) (declare (ignore c)) (invoke-restart 'clip-value)))) (lisp-struct::integer-limit-unsigned -500000 2))))
      (is (= 65535 (handler-bind ((limit-error #'(lambda (c) (declare (ignore c)) (invoke-restart 'clip-value)))) (lisp-struct::integer-limit-unsigned +500000 2))))
      (is (= 0 (handler-bind ((limit-error #'(lambda (c) (declare (ignore c)) (invoke-restart 'clip-value)))) (lisp-struct::integer-limit-unsigned -5000000000 4))))
      (is (= 4294967295 (handler-bind ((limit-error #'(lambda (c) (declare (ignore c)) (invoke-restart 'clip-value)))) (lisp-struct::integer-limit-unsigned +5000000000 4))))
      (is (= -128 (handler-bind ((limit-error #'(lambda (c) (declare (ignore c)) (invoke-restart 'clip-value)))) (lisp-struct::integer-limit-signed -500 1))))
      (is (= +127 (handler-bind ((limit-error #'(lambda (c) (declare (ignore c)) (invoke-restart 'clip-value)))) (lisp-struct::integer-limit-signed +500 1))))
      (is (= -32768 (handler-bind ((limit-error #'(lambda (c) (declare (ignore c)) (invoke-restart 'clip-value)))) (lisp-struct::integer-limit-signed -500000 2))))
      (is (= +32767 (handler-bind ((limit-error #'(lambda (c) (declare (ignore c)) (invoke-restart 'clip-value)))) (lisp-struct::integer-limit-signed +500000 2))))
      (is (= -2147483648 (handler-bind ((limit-error #'(lambda (c) (declare (ignore c)) (invoke-restart 'clip-value)))) (lisp-struct::integer-limit-signed -5000000000 4))))
      (is (= +2147483647 (handler-bind ((limit-error #'(lambda (c) (declare (ignore c)) (invoke-restart 'clip-value)))) (lisp-struct::integer-limit-signed +5000000000 4))))
      ;; restarts (wrap value)
      (is (= 255 (handler-bind ((limit-error #'(lambda (c) (declare (ignore c)) (invoke-restart 'wrap-value)))) (lisp-struct::integer-limit-unsigned -1 1))))
      (is (= 0 (handler-bind ((limit-error #'(lambda (c) (declare (ignore c)) (invoke-restart 'wrap-value)))) (lisp-struct::integer-limit-unsigned 256 1))))
      (is (= 65535 (handler-bind ((limit-error #'(lambda (c) (declare (ignore c)) (invoke-restart 'wrap-value)))) (lisp-struct::integer-limit-unsigned -1 2))))
      (is (= 0 (handler-bind ((limit-error #'(lambda (c) (declare (ignore c)) (invoke-restart 'wrap-value)))) (lisp-struct::integer-limit-unsigned 65536 2))))
      (is (= 4294967295 (handler-bind ((limit-error #'(lambda (c) (declare (ignore c)) (invoke-restart 'wrap-value)))) (lisp-struct::integer-limit-unsigned -1 4))))
      (is (= 0 (handler-bind ((limit-error #'(lambda (c) (declare (ignore c)) (invoke-restart 'wrap-value)))) (lisp-struct::integer-limit-unsigned 4294967296 4)))))

(test (integer-unpack-tests :depends-on conversion-tests)
      ;; 8 bits unsigned
      (is (equal '(0 1 2 254 255) (unpack ">BBBBB" #(0 1 2 254 255))))
      (is (equal '(0 1 2 254 255) (unpack "<BBBBB" #(0 1 2 254 255))))
      (is (equal '(-2 0 1 2 254 255) (unpack ">hBBBBB" #(255 254 0 1 2 254 255))))
      (is (equal '(-2 0 1 2 254 255) (unpack "<hBBBBB" #(254 255 0 1 2 254 255))))
      (is (equal '(-2 0 1 2 254 255) (unpack ">lBBBBB" #(255 255 255 254 0 1 2 254 255))))
      (is (equal '(-2 0 1 2 254 255) (unpack "<lBBBBB" #(254 255 255 255 0 1 2 254 255))))
      (is (equal '(0 1 2 254 255) (unpack ">B3BB" #(0 1 2 254 255))))
      (is (equal '(0 1 2 254 255) (unpack "<B3BB" #(0 1 2 254 255))))
      (is (equal '(-2 0 1 2 254 255) (unpack ">hB3BB" #(255 254 0 1 2 254 255))))
      (is (equal '(-2 0 1 2 254 255) (unpack "<hB3BB" #(254 255 0 1 2 254 255))))
      (is (equal '(-2 0 1 2 254 255) (unpack ">lB3BB" #(255 255 255 254 0 1 2 254 255))))
      (is (equal '(-2 0 1 2 254 255) (unpack "<lB3BB" #(254 255 255 255 0 1 2 254 255))))
      ;; 8 bits signed
      (is (equal '(0 1 2 -2 -1) (unpack ">bbbbb" #(0 1 2 254 255))))
      (is (equal '(0 1 2 -2 -1) (unpack "<bbbbb" #(0 1 2 254 255))))
      (is (equal '(1 0 1 2 -2 -1) (unpack ">Hbbbbb" #(0 1 0 1 2 254 255))))
      (is (equal '(1 0 1 2 -2 -1) (unpack "<Hbbbbb" #(1 0 0 1 2 254 255))))
      (is (equal '(1 0 1 2 -2 -1) (unpack ">Lbbbbb" #(0 0 0 1 0 1 2 254 255))))
      (is (equal '(1 0 1 2 -2 -1) (unpack "<Lbbbbb" #(1 0 0 0 0 1 2 254 255))))
      (is (equal '(0 1 2 -2 -1) (unpack ">b3bb" #(0 1 2 254 255))))
      (is (equal '(0 1 2 -2 -1) (unpack "<b3bb" #(0 1 2 254 255))))
      (is (equal '(1 0 1 2 -2 -1) (unpack ">Hb3bb" #(0 1 0 1 2 254 255))))
      (is (equal '(1 0 1 2 -2 -1) (unpack "<Hb3bb" #(1 0 0 1 2 254 255))))
      (is (equal '(1 0 1 2 -2 -1) (unpack ">Lb3bb" #(0 0 0 1 0 1 2 254 255))))
      (is (equal '(1 0 1 2 -2 -1) (unpack "<Lb3bb" #(1 0 0 0 0 1 2 254 255))))
      ;; 16 bits unsigned
      (is (equal '(0 1 255 256 65535) (unpack ">HHHHH" #(0 0  0 1  0 255  1 0  255 255))))
      (is (equal '(0 1 255 256 65535) (unpack "<HHHHH" #(0 0  1 0  255 0  0 1  255 255))))
      (is (equal '(-2 0 1 255 256 65535) (unpack ">bHHHHH" #(254  0 0  0 1  0 255  1 0  255 255))))
      (is (equal '(-2 0 1 255 256 65535) (unpack "<bHHHHH" #(254  0 0  1 0  255 0  0 1  255 255))))
      (is (equal '(-2 0 1 255 256 65535) (unpack ">lHHHHH" #(255 255 255 254  0 0  0 1  0 255  1 0  255 255))))
      (is (equal '(-2 0 1 255 256 65535) (unpack "<lHHHHH" #(254 255 255 255  0 0  1 0  255 0  0 1  255 255))))
      (is (equal '(0 1 255 256 65535) (unpack ">H3HH" #(0 0  0 1  0 255  1 0  255 255))))
      (is (equal '(0 1 255 256 65535) (unpack "<H3HH" #(0 0  1 0  255 0  0 1  255 255))))
      (is (equal '(-2 0 1 255 256 65535) (unpack ">bH3HH" #(254  0 0  0 1  0 255  1 0  255 255))))
      (is (equal '(-2 0 1 255 256 65535) (unpack "<bH3HH" #(254  0 0  1 0  255 0  0 1  255 255))))
      (is (equal '(-2 0 1 255 256 65535) (unpack ">lH3HH" #(255 255 255 254  0 0  0 1  0 255  1 0  255 255))))
      (is (equal '(-2 0 1 255 256 65535) (unpack "<lH3HH" #(254 255 255 255  0 0  1 0  255 0  0 1  255 255))))
      ;; 16 bits signed
      (is (equal '(0 1 -1 127 -128 128 -129 32766 -32767 32767 -32768) (unpack ">hhhhhhhhhhh" #(0 0  0 1  255 255  0 127  255 128  0 128  255 127  127 254  128 1  127 255  128 0))))
      (is (equal '(0 1 -1 127 -128 128 -129 32766 -32767 32767 -32768) (unpack "<hhhhhhhhhhh" #(0 0  1 0  255 255  127 0  128 255  128 0  127 255  254 127  1 128  255 127  0 128))))
      (is (equal '(1 0 1 -1 127 -128 128 -129 32766 -32767 32767 -32768) (unpack ">Bhhhhhhhhhhh" #(1  0 0  0 1  255 255  0 127  255 128  0 128  255 127  127 254  128 1  127 255  128 0))))
      (is (equal '(1 0 1 -1 127 -128 128 -129 32766 -32767 32767 -32768) (unpack "<Bhhhhhhhhhhh" #(1  0 0  1 0  255 255  127 0  128 255  128 0  127 255  254 127  1 128  255 127  0 128))))
      (is (equal '(1 0 1 -1 127 -128 128 -129 32766 -32767 32767 -32768) (unpack ">Lhhhhhhhhhhh" #(0 0 0 1  0 0  0 1  255 255  0 127  255 128  0 128  255 127  127 254  128 1  127 255  128 0))))
      (is (equal '(1 0 1 -1 127 -128 128 -129 32766 -32767 32767 -32768) (unpack "<Lhhhhhhhhhhh" #(1 0 0 0  0 0  1 0  255 255  127 0  128 255  128 0  127 255  254 127  1 128  255 127  0 128))))
      (is (equal '(0 1 -1 127 -128 128 -129 32766 -32767 32767 -32768) (unpack ">h9hh" #(0 0  0 1  255 255  0 127  255 128  0 128  255 127  127 254  128 1  127 255  128 0))))
      (is (equal '(0 1 -1 127 -128 128 -129 32766 -32767 32767 -32768) (unpack "<h9hh" #(0 0  1 0  255 255  127 0  128 255  128 0  127 255  254 127  1 128  255 127  0 128))))
      (is (equal '(1 0 1 -1 127 -128 128 -129 32766 -32767 32767 -32768) (unpack ">Bh9hh" #(1  0 0  0 1  255 255  0 127  255 128  0 128  255 127  127 254  128 1  127 255  128 0))))
      (is (equal '(1 0 1 -1 127 -128 128 -129 32766 -32767 32767 -32768) (unpack "<Bh9hh" #(1  0 0  1 0  255 255  127 0  128 255  128 0  127 255  254 127  1 128  255 127  0 128))))
      (is (equal '(1 0 1 -1 127 -128 128 -129 32766 -32767 32767 -32768) (unpack ">Lh9hh" #(0 0 0 1  0 0  0 1  255 255  0 127  255 128  0 128  255 127  127 254  128 1  127 255  128 0))))
      (is (equal '(1 0 1 -1 127 -128 128 -129 32766 -32767 32767 -32768) (unpack "<Lh9hh" #(1 0 0 0  0 0  1 0  255 255  127 0  128 255  128 0  127 255  254 127  1 128  255 127  0 128))))
      ;; 32 bits unsigned
      (is (equal '(0 1 255 256 4294967295) (unpack ">LLLLL" #(0 0 0 0  0 0 0 1  0 0 0 255  0 0 1 0  255 255 255 255))))
      (is (equal '(0 1 255 256 4294967295) (unpack "<LLLLL" #(0 0 0 0  1 0 0 0  255 0 0 0  0 1 0 0  255 255 255 255))))
      (is (equal '(0 0 1 255 256 4294967295) (unpack ">bLLLLL" #(0  0 0 0 0  0 0 0 1  0 0 0 255  0 0 1 0  255 255 255 255))))
      (is (equal '(0 0 1 255 256 4294967295) (unpack "<bLLLLL" #(0  0 0 0 0  1 0 0 0  255 0 0 0  0 1 0 0  255 255 255 255))))
      (is (equal '(0 0 1 255 256 4294967295) (unpack ">hLLLLL" #(0 0  0 0 0 0  0 0 0 1  0 0 0 255  0 0 1 0  255 255 255 255))))
      (is (equal '(0 0 1 255 256 4294967295) (unpack "<hLLLLL" #(0 0  0 0 0 0  1 0 0 0  255 0 0 0  0 1 0 0  255 255 255 255))))
      (is (equal '(0 1 255 256 4294967295) (unpack ">L3LL" #(0 0 0 0  0 0 0 1  0 0 0 255  0 0 1 0  255 255 255 255))))
      (is (equal '(0 1 255 256 4294967295) (unpack "<L3LL" #(0 0 0 0  1 0 0 0  255 0 0 0  0 1 0 0  255 255 255 255))))
      (is (equal '(0 0 1 255 256 4294967295) (unpack ">bL3LL" #(0  0 0 0 0  0 0 0 1  0 0 0 255  0 0 1 0  255 255 255 255))))
      (is (equal '(0 0 1 255 256 4294967295) (unpack "<bL3LL" #(0  0 0 0 0  1 0 0 0  255 0 0 0  0 1 0 0  255 255 255 255))))
      (is (equal '(0 0 1 255 256 4294967295) (unpack ">hL3LL" #(0 0  0 0 0 0  0 0 0 1  0 0 0 255  0 0 1 0  255 255 255 255))))
      (is (equal '(0 0 1 255 256 4294967295) (unpack "<hL3LL" #(0 0  0 0 0 0  1 0 0 0  255 0 0 0  0 1 0 0  255 255 255 255))))
      ;; 32 bits signed
      (is (equal '(0 1 -1 127 -128 128 -129 2147483646 -2147483647 2147483647 -2147483648)
                 (unpack ">lllllllllll" #(0 0 0 0  0 0 0 1  255 255 255 255  0 0 0 127  255 255 255 128  0 0 0 128  255 255 255 127  127 255 255 254  128 0 0 1  127 255 255 255  128 0 0 0))))
      (is (equal '(0 1 -1 127 -128 128 -129 2147483646 -2147483647 2147483647 -2147483648)
                 (unpack "<lllllllllll" #(0 0 0 0  1 0 0 0  255 255 255 255  127 0 0 0  128 255 255 255  128 0 0 0  127 255 255 255  254 255 255 127  1 0 0 128  255 255 255 127  0 0 0 128))))
      (is (equal '(0 0 1 -1 127 -128 128 -129 2147483646 -2147483647 2147483647 -2147483648)
                 (unpack ">Blllllllllll" #(0  0 0 0 0  0 0 0 1  255 255 255 255  0 0 0 127  255 255 255 128  0 0 0 128  255 255 255 127  127 255 255 254  128 0 0 1  127 255 255 255  128 0 0 0))))
      (is (equal '(0 0 1 -1 127 -128 128 -129 2147483646 -2147483647 2147483647 -2147483648)
                 (unpack "<Blllllllllll" #(0  0 0 0 0  1 0 0 0  255 255 255 255  127 0 0 0  128 255 255 255  128 0 0 0  127 255 255 255  254 255 255 127  1 0 0 128  255 255 255 127  0 0 0 128))))
      (is (equal '(0 0 1 -1 127 -128 128 -129 2147483646 -2147483647 2147483647 -2147483648)
                 (unpack ">Hlllllllllll" #(0 0  0 0 0 0  0 0 0 1  255 255 255 255  0 0 0 127  255 255 255 128  0 0 0 128  255 255 255 127  127 255 255 254  128 0 0 1  127 255 255 255  128 0 0 0))))
      (is (equal '(0 0 1 -1 127 -128 128 -129 2147483646 -2147483647 2147483647 -2147483648)
                 (unpack "<Hlllllllllll" #(0 0  0 0 0 0  1 0 0 0  255 255 255 255  127 0 0 0  128 255 255 255  128 0 0 0  127 255 255 255  254 255 255 127  1 0 0 128  255 255 255 127  0 0 0 128))))
      (is (equal '(0 1 -1 127 -128 128 -129 2147483646 -2147483647 2147483647 -2147483648)
                 (unpack ">l9ll" #(0 0 0 0  0 0 0 1  255 255 255 255  0 0 0 127  255 255 255 128  0 0 0 128  255 255 255 127  127 255 255 254  128 0 0 1  127 255 255 255  128 0 0 0))))
      (is (equal '(0 1 -1 127 -128 128 -129 2147483646 -2147483647 2147483647 -2147483648)
                 (unpack "<l9ll" #(0 0 0 0  1 0 0 0  255 255 255 255  127 0 0 0  128 255 255 255  128 0 0 0  127 255 255 255  254 255 255 127  1 0 0 128  255 255 255 127  0 0 0 128))))
      (is (equal '(0 0 1 -1 127 -128 128 -129 2147483646 -2147483647 2147483647 -2147483648)
                 (unpack ">Bl9ll" #(0  0 0 0 0  0 0 0 1  255 255 255 255  0 0 0 127  255 255 255 128  0 0 0 128  255 255 255 127  127 255 255 254  128 0 0 1  127 255 255 255  128 0 0 0))))
      (is (equal '(0 0 1 -1 127 -128 128 -129 2147483646 -2147483647 2147483647 -2147483648)
                 (unpack "<Bl9ll" #(0  0 0 0 0  1 0 0 0  255 255 255 255  127 0 0 0  128 255 255 255  128 0 0 0  127 255 255 255  254 255 255 127  1 0 0 128  255 255 255 127  0 0 0 128))))
      (is (equal '(0 0 1 -1 127 -128 128 -129 2147483646 -2147483647 2147483647 -2147483648)
                 (unpack ">Hl9ll" #(0 0  0 0 0 0  0 0 0 1  255 255 255 255  0 0 0 127  255 255 255 128  0 0 0 128  255 255 255 127  127 255 255 254  128 0 0 1  127 255 255 255  128 0 0 0))))
      (is (equal '(0 0 1 -1 127 -128 128 -129 2147483646 -2147483647 2147483647 -2147483648)
                 (unpack "<Hl9ll" #(0 0  0 0 0 0  1 0 0 0  255 255 255 255  127 0 0 0  128 255 255 255  128 0 0 0  127 255 255 255  254 255 255 127  1 0 0 128  255 255 255 127  0 0 0 128))))
      ;; mixed
      (is (equal '(-2 1 -2 1 -2 1) (unpack ">bHlBhL" #(254 0 1 255 255 255 254 1 255 254 0 0 0 1))))
      (is (equal '(-2 1 -2 1 -2 1) (unpack "<bHlBhL" #(254 1 0 254 255 255 255 1 254 255 1 0 0 0))))
      (is (equal '(-2 -2 1 1 -2 -2 1 1 -2 -2 1 1) (unpack ">2b2H2l2B2h2L" #(254 254 0 1 0 1 255 255 255 254 255 255 255 254 1 1 255 254 255 254 0 0 0 1 0 0 0 1))))
      (is (equal '(-2 -2 1 1 -2 -2 1 1 -2 -2 1 1) (unpack "<2b2H2l2B2h2L" #(254 254 1 0 1 0 254 255 255 255 254 255 255 255 1 1 254 255 254 255 1 0 0 0 1 0 0 0)))))

(test (integer-pack-tests :depends-on conversion-tests)
      ;; 8 bits unsigned
      (is (array= #(0 1 2 254 255) (pack ">BBBBB" '(0 1 2 254 255))))
      (is (array= #(0 1 2 254 255) (pack "<BBBBB" '(0 1 2 254 255))))
      (is (array= #(255 254 0 1 2 254 255) (pack ">hBBBBB" '(-2 0 1 2 254 255))))
      (is (array= #(254 255 0 1 2 254 255) (pack "<hBBBBB" '(-2 0 1 2 254 255))))
      (is (array= #(255 255 255 254 0 1 2 254 255) (pack ">lBBBBB" '(-2 0 1 2 254 255))))
      (is (array= #(254 255 255 255 0 1 2 254 255) (pack "<lBBBBB" '(-2 0 1 2 254 255))))
      (is (array= #(0 1 2 254 255) (pack ">B3BB" '(0 1 2 254 255))))
      (is (array= #(0 1 2 254 255) (pack "<B3BB" '(0 1 2 254 255))))
      (is (array= #(255 254 0 1 2 254 255) (pack ">hB3BB" '(-2 0 1 2 254 255))))
      (is (array= #(254 255 0 1 2 254 255) (pack "<hB3BB" '(-2 0 1 2 254 255))))
      (is (array= #(255 255 255 254 0 1 2 254 255) (pack ">lB3BB" '(-2 0 1 2 254 255))))
      (is (array= #(254 255 255 255 0 1 2 254 255) (pack "<lB3BB" '(-2 0 1 2 254 255))))
      ;; 8 bits signed
      (is (array= #(0 1 2 254 255) (pack ">bbbbb" '(0 1 2 -2 -1))))
      (is (array= #(0 1 2 254 255) (pack "<bbbbb" '(0 1 2 -2 -1))))
      (is (array= #(0 1 0 1 2 254 255) (pack ">Hbbbbb" '(1 0 1 2 -2 -1))))
      (is (array= #(1 0 0 1 2 254 255) (pack "<Hbbbbb" '(1 0 1 2 -2 -1))))
      (is (array= #(0 0 0 1 0 1 2 254 255) (pack ">Lbbbbb" '(1 0 1 2 -2 -1))))
      (is (array= #(1 0 0 0 0 1 2 254 255) (pack "<Lbbbbb" '(1 0 1 2 -2 -1))))
      (is (array= #(0 1 2 254 255) (pack ">b3bb" '(0 1 2 -2 -1))))
      (is (array= #(0 1 2 254 255) (pack "<b3bb" '(0 1 2 -2 -1))))
      (is (array= #(0 1 0 1 2 254 255) (pack ">Hb3bb" '(1 0 1 2 -2 -1))))
      (is (array= #(1 0 0 1 2 254 255) (pack "<Hb3bb" '(1 0 1 2 -2 -1))))
      (is (array= #(0 0 0 1 0 1 2 254 255) (pack ">Lb3bb" '(1 0 1 2 -2 -1))))
      (is (array= #(1 0 0 0 0 1 2 254 255) (pack "<Lb3bb" '(1 0 1 2 -2 -1))))
      ;; 16 bits unsigned
      (is (array= #(0 0  0 1  0 2  0 255  1 0  255 255) (pack ">HHHHHH" '(0 1 2 255 256 65535))))
      (is (array= #(0 0  1 0  2 0  255 0  0 1  255 255) (pack "<HHHHHH" '(0 1 2 255 256 65535))))
      (is (array= #(254  0 0  0 1  0 2  0 255  1 0  255 255) (pack ">bHHHHHH" '(-2 0 1 2 255 256 65535))))
      (is (array= #(254  0 0  1 0  2 0  255 0  0 1  255 255) (pack "<bHHHHHH" '(-2 0 1 2 255 256 65535))))
      (is (array= #(255 255 255 254  0 0  0 1  0 2  0 255  1 0  255 255) (pack ">lHHHHHH" '(-2 0 1 2 255 256 65535))))
      (is (array= #(254 255 255 255  0 0  1 0  2 0  255 0  0 1  255 255) (pack "<lHHHHHH" '(-2 0 1 2 255 256 65535))))
      (is (array= #(0 0  0 1  0 2  0 255  1 0  255 255) (pack ">H4HH" '(0 1 2 255 256 65535))))
      (is (array= #(0 0  1 0  2 0  255 0  0 1  255 255) (pack "<H4HH" '(0 1 2 255 256 65535))))
      (is (array= #(254  0 0  0 1  0 2  0 255  1 0  255 255) (pack ">bH4HH" '(-2 0 1 2 255 256 65535))))
      (is (array= #(254  0 0  1 0  2 0  255 0  0 1  255 255) (pack "<bH4HH" '(-2 0 1 2 255 256 65535))))
      (is (array= #(255 255 255 254  0 0  0 1  0 2  0 255  1 0  255 255) (pack ">lH4HH" '(-2 0 1 2 255 256 65535))))
      (is (array= #(254 255 255 255  0 0  1 0  2 0  255 0  0 1  255 255) (pack "<lH4HH" '(-2 0 1 2 255 256 65535))))
      ;; 16 bits signed
      (is (array= #(0 0  0 1  255 255  0 127  255 128  0 128  255 127  127 254  128 1  127 255  128 0) (pack ">hhhhhhhhhhh" '(0 1 -1 127 -128 128 -129 32766 -32767 32767 -32768))))
      (is (array= #(0 0  1 0  255 255  127 0  128 255  128 0  127 255  254 127  1 128  255 127  0 128) (pack "<hhhhhhhhhhh" '(0 1 -1 127 -128 128 -129 32766 -32767 32767 -32768))))
      (is (array= #(1  0 0  0 1  255 255  0 127  255 128  0 128  255 127  127 254  128 1  127 255  128 0) (pack ">Bhhhhhhhhhhh" '(1 0 1 -1 127 -128 128 -129 32766 -32767 32767 -32768))))
      (is (array= #(1  0 0  1 0  255 255  127 0  128 255  128 0  127 255  254 127  1 128  255 127  0 128) (pack "<Bhhhhhhhhhhh" '(1 0 1 -1 127 -128 128 -129 32766 -32767 32767 -32768))))
      (is (array= #(0 0 0 1  0 0  0 1  255 255  0 127  255 128  0 128  255 127  127 254  128 1  127 255  128 0) (pack ">Lhhhhhhhhhhh" '(1 0 1 -1 127 -128 128 -129 32766 -32767 32767 -32768))))
      (is (array= #(1 0 0 0  0 0  1 0  255 255  127 0  128 255  128 0  127 255  254 127  1 128  255 127  0 128) (pack "<Lhhhhhhhhhhh" '(1 0 1 -1 127 -128 128 -129 32766 -32767 32767 -32768))))
      (is (array= #(0 0  0 1  255 255  0 127  255 128  0 128  255 127  127 254  128 1  127 255  128 0) (pack ">h9hh" '(0 1 -1 127 -128 128 -129 32766 -32767 32767 -32768))))
      (is (array= #(0 0  1 0  255 255  127 0  128 255  128 0  127 255  254 127  1 128  255 127  0 128) (pack "<h9hh" '(0 1 -1 127 -128 128 -129 32766 -32767 32767 -32768))))
      (is (array= #(1  0 0  0 1  255 255  0 127  255 128  0 128  255 127  127 254  128 1  127 255  128 0) (pack ">Bh9hh" '(1 0 1 -1 127 -128 128 -129 32766 -32767 32767 -32768))))
      (is (array= #(1  0 0  1 0  255 255  127 0  128 255  128 0  127 255  254 127  1 128  255 127  0 128) (pack "<Bh9hh" '(1 0 1 -1 127 -128 128 -129 32766 -32767 32767 -32768))))
      (is (array= #(0 0 0 1  0 0  0 1  255 255  0 127  255 128  0 128  255 127  127 254  128 1  127 255  128 0) (pack ">Lh9hh" '(1 0 1 -1 127 -128 128 -129 32766 -32767 32767 -32768))))
      (is (array= #(1 0 0 0  0 0  1 0  255 255  127 0  128 255  128 0  127 255  254 127  1 128  255 127  0 128) (pack "<Lh9hh" '(1 0 1 -1 127 -128 128 -129 32766 -32767 32767 -32768))))
      ;; 32 bits unsigned
      (is (array= #(0 0 0 0  0 0 0 1  0 0 0 255  0 0 1 0  255 255 255 255) (pack ">LLLLL" '(0 1 255 256 4294967295))))
      (is (array= #(0 0 0 0  1 0 0 0  255 0 0 0  0 1 0 0  255 255 255 255) (pack "<LLLLL" '(0 1 255 256 4294967295))))
      (is (array= #(255 0 0 0 0  0 0 0 1  0 0 0 255  0 0 1 0  255 255 255 255) (pack ">bLLLLL" '(-1 0 1 255 256 4294967295))))
      (is (array= #(255 0 0 0 0  1 0 0 0  255 0 0 0  0 1 0 0  255 255 255 255) (pack "<bLLLLL" '(-1 0 1 255 256 4294967295))))
      (is (array= #(255 255 0 0 0 0  0 0 0 1  0 0 0 255  0 0 1 0  255 255 255 255) (pack ">hLLLLL" '(-1 0 1 255 256 4294967295))))
      (is (array= #(255 255 0 0 0 0  1 0 0 0  255 0 0 0  0 1 0 0  255 255 255 255) (pack "<hLLLLL" '(-1 0 1 255 256 4294967295))))
      (is (array= #(0 0 0 0  0 0 0 1  0 0 0 255  0 0 1 0  255 255 255 255) (pack ">L3LL" '(0 1 255 256 4294967295))))
      (is (array= #(0 0 0 0  1 0 0 0  255 0 0 0  0 1 0 0  255 255 255 255) (pack "<L3LL" '(0 1 255 256 4294967295))))
      (is (array= #(255 0 0 0 0  0 0 0 1  0 0 0 255  0 0 1 0  255 255 255 255) (pack ">bL3LL" '(-1 0 1 255 256 4294967295))))
      (is (array= #(255 0 0 0 0  1 0 0 0  255 0 0 0  0 1 0 0  255 255 255 255) (pack "<bL3LL" '(-1 0 1 255 256 4294967295))))
      (is (array= #(255 255 0 0 0 0  0 0 0 1  0 0 0 255  0 0 1 0  255 255 255 255) (pack ">hL3LL" '(-1 0 1 255 256 4294967295))))
      (is (array= #(255 255 0 0 0 0  1 0 0 0  255 0 0 0  0 1 0 0  255 255 255 255) (pack "<hL3LL" '(-1 0 1 255 256 4294967295))))
      ;; 32 bits signed
      (is (array= #(0 0 0 0  0 0 0 1  255 255 255 255  0 0 0 127  255 255 255 128  0 0 0 128  255 255 255 127  127 255 255 254  128 0 0 1  127 255 255 255  128 0 0 0)
                  (pack ">lllllllllll" '(0 1 -1 127 -128 128 -129 2147483646 -2147483647 2147483647 -2147483648))))
      (is (array= #(0 0 0 0  1 0 0 0  255 255 255 255  127 0 0 0  128 255 255 255  128 0 0 0  127 255 255 255  254 255 255 127  1 0 0 128  255 255 255 127  0 0 0 128)
                  (pack "<lllllllllll" '(0 1 -1 127 -128 128 -129 2147483646 -2147483647 2147483647 -2147483648))))
      (is (array= #(255  0 0 0 0  0 0 0 1  255 255 255 255  0 0 0 127  255 255 255 128  0 0 0 128  255 255 255 127  127 255 255 254  128 0 0 1  127 255 255 255  128 0 0 0)
                  (pack ">Blllllllllll" '(255 0 1 -1 127 -128 128 -129 2147483646 -2147483647 2147483647 -2147483648))))
      (is (array= #(255  0 0 0 0  1 0 0 0  255 255 255 255  127 0 0 0  128 255 255 255  128 0 0 0  127 255 255 255  254 255 255 127  1 0 0 128  255 255 255 127  0 0 0 128)
                  (pack "<Blllllllllll" '(255 0 1 -1 127 -128 128 -129 2147483646 -2147483647 2147483647 -2147483648))))
      (is (array= #(255 255  0 0 0 0  0 0 0 1  255 255 255 255  0 0 0 127  255 255 255 128  0 0 0 128  255 255 255 127  127 255 255 254  128 0 0 1  127 255 255 255  128 0 0 0)
                  (pack ">Hlllllllllll" '(65535 0 1 -1 127 -128 128 -129 2147483646 -2147483647 2147483647 -2147483648))))
      (is (array= #(255 255  0 0 0 0  1 0 0 0  255 255 255 255  127 0 0 0  128 255 255 255  128 0 0 0  127 255 255 255  254 255 255 127  1 0 0 128  255 255 255 127  0 0 0 128)
                  (pack "<Hlllllllllll" '(65535 0 1 -1 127 -128 128 -129 2147483646 -2147483647 2147483647 -2147483648))))
      (is (array= #(0 0 0 0  0 0 0 1  255 255 255 255  0 0 0 127  255 255 255 128  0 0 0 128  255 255 255 127  127 255 255 254  128 0 0 1  127 255 255 255  128 0 0 0)
                  (pack ">l9ll" '(0 1 -1 127 -128 128 -129 2147483646 -2147483647 2147483647 -2147483648))))
      (is (array= #(0 0 0 0  1 0 0 0  255 255 255 255  127 0 0 0  128 255 255 255  128 0 0 0  127 255 255 255  254 255 255 127  1 0 0 128  255 255 255 127  0 0 0 128)
                  (pack "<l9ll" '(0 1 -1 127 -128 128 -129 2147483646 -2147483647 2147483647 -2147483648))))
      (is (array= #(255  0 0 0 0  0 0 0 1  255 255 255 255  0 0 0 127  255 255 255 128  0 0 0 128  255 255 255 127  127 255 255 254  128 0 0 1  127 255 255 255  128 0 0 0)
                  (pack ">Bl9ll" '(255 0 1 -1 127 -128 128 -129 2147483646 -2147483647 2147483647 -2147483648))))
      (is (array= #(255  0 0 0 0  1 0 0 0  255 255 255 255  127 0 0 0  128 255 255 255  128 0 0 0  127 255 255 255  254 255 255 127  1 0 0 128  255 255 255 127  0 0 0 128)
                  (pack "<Bl9ll" '(255 0 1 -1 127 -128 128 -129 2147483646 -2147483647 2147483647 -2147483648))))
      (is (array= #(255 255  0 0 0 0  0 0 0 1  255 255 255 255  0 0 0 127  255 255 255 128  0 0 0 128  255 255 255 127  127 255 255 254  128 0 0 1  127 255 255 255  128 0 0 0)
                  (pack ">Hl9ll" '(65535 0 1 -1 127 -128 128 -129 2147483646 -2147483647 2147483647 -2147483648))))
      (is (array= #(255 255  0 0 0 0  1 0 0 0  255 255 255 255  127 0 0 0  128 255 255 255  128 0 0 0  127 255 255 255  254 255 255 127  1 0 0 128  255 255 255 127  0 0 0 128)
                  (pack "<Hl9ll" '(65535 0 1 -1 127 -128 128 -129 2147483646 -2147483647 2147483647 -2147483648))))
      ;; Mixed
      (is (array= #(254 0 1 255 255 255 254 1 255 254 0 0 0 1) (pack ">bHlBhL" '(-2 1 -2 1 -2 1))))
      (is (array= #(254 1 0 254 255 255 255 1 254 255 1 0 0 0) (pack "<bHlBhL" '(-2 1 -2 1 -2 1))))
      (is (array= #(254 254 0 1 0 1 255 255 255 254 255 255 255 254 1 1 255 254 255 254 0 0 0 1 0 0 0 1) (pack ">2b2H2l2B2h2L" '(-2 -2 1 1 -2 -2 1 1 -2 -2 1 1))))
      (is (array= #(254 254 1 0 1 0 254 255 255 255 254 255 255 255 1 1 254 255 254 255 1 0 0 0 1 0 0 0) (pack "<2b2H2l2B2h2L" '(-2 -2 1 1 -2 -2 1 1 -2 -2 1 1)))))

(test (usage-tests :depends-on (and character-tests integer-unpack-tests integer-pack-tests))
      ;; Number of arguments (unpack)
      (finishes (unpack ">bHlBhL" #(0 0 0 0 0 0 0 0 0 0 0 0 0 0)))
      (signals argument-error (unpack ">bHlBhL" #(0 0 0 0 0 0 0 0 0 0 0 0 0)))
      (signals argument-error (unpack ">bHlBhL" #(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))
      (finishes (unpack ">B12H2L" #(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))
      (signals argument-error (unpack ">B12H2L" #(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))
      (signals argument-error (unpack ">B12H2L" #(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))
      ;; Number of arguments (pack)
      (finishes (pack ">bHlBhL" '(0 0 0 0 0 0)))
      (signals argument-error (pack ">bHlBhL" '(0 0 0 0 0)))
      (signals argument-error (pack ">bHlBhL" '(0 0 0 0 0 0 0)))
      (finishes (pack ">B12H2L" '(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))
      (signals argument-error (pack ">B12H2L" '(0 0 0 0 0 0 0 0 0 0 0 0 0 0)))
      (signals argument-error (pack ">B12H2L" '(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))
      ;; Format string
      (signals argument-error (eval '(unpack "" '())))
      (signals argument-error (eval '(pack "" '())))
      (signals argument-error (eval '(unpack "b" '(0))))
      (signals argument-error (eval '(pack "b" '(0))))
      (signals argument-error (eval '(unpack ">0b" '())))
      (signals argument-error (eval '(pack ">0b" '())))
      ;; Return type
      (is-true (typep (unpack ">bHlBhL" '(0 0 0 0 0 0 0 0 0 0 0 0 0 0)) 'list))
      (is-true (typep (pack ">bHlBhL" '(0 0 0 0 0 0)) '(simple-array (unsigned-byte 8) (14)))))

(defun lisp-struct-test ()
  (run!))
